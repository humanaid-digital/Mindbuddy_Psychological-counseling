name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_DATABASE: mindbuddy-test
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ping: 1})' || mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Cache MongoDB binaries
      uses: actions/cache@v3
      with:
        path: ./mongodb-binaries
        key: mongodb-binaries-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          mongodb-binaries-${{ runner.os }}-

    - name: Install dependencies
      run: |
        npm ci
        # MongoDB Memory Server 바이너리 캐시 디렉토리 생성
        mkdir -p ./mongodb-binaries

    - name: Run linting
      run: npm run lint

    - name: Wait for MongoDB
      run: |
        echo "Waiting for MongoDB to be ready..."
        sleep 20
        
        # MongoDB 연결 테스트
        for i in {1..60}; do
          if nc -z localhost 27017; then
            echo "MongoDB port is open, testing connection..."
            
            # MongoDB 연결 테스트 (여러 방법 시도)
            if timeout 10 node -e "
              const mongoose = require('mongoose');
              mongoose.connect('mongodb://localhost:27017/mindbuddy-test', {
                useNewUrlParser: true,
                useUnifiedTopology: true,
                serverSelectionTimeoutMS: 5000
              }).then(() => {
                console.log('MongoDB connection successful');
                process.exit(0);
              }).catch(err => {
                console.log('MongoDB connection failed:', err.message);
                process.exit(1);
              });
            "; then
              echo "MongoDB is ready and accepting connections!"
              break
            fi
          fi
          
          echo "Waiting for MongoDB... ($i/60)"
          sleep 3
          
          if [ $i -eq 60 ]; then
            echo "MongoDB failed to start after 3 minutes"
            exit 1
          fi
        done

    - name: Verify test setup
      run: |
        echo "Node.js version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "MongoDB connection test..."
        
    - name: Run tests
      run: |
        echo "Starting tests with environment:"
        echo "NODE_ENV: $NODE_ENV"
        echo "MONGODB_URI: $MONGODB_URI"
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        
        # 테스트 재시도 로직
        for i in {1..3}; do
          echo "Test attempt $i/3"
          if npm test -- --verbose --detectOpenHandles --forceExit; then
            echo "Tests passed on attempt $i"
            break
          elif [ $i -eq 3 ]; then
            echo "Tests failed after 3 attempts"
            echo "Showing recent logs..."
            ls -la logs/ || echo "No logs directory"
            exit 1
          else
            echo "Test attempt $i failed, retrying..."
            sleep 10
          fi
        done
      env:
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-for-ci-very-long-and-secure
        MONGODB_URI: mongodb://localhost:27017/mindbuddy-test
        CI: true
        FORCE_COLOR: 0
        DEBUG: false

    - name: Generate test coverage
      run: npm run test:coverage
      continue-on-error: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      continue-on-error: true
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies for security scan
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level moderate || true

    - name: Run Snyk to check for vulnerabilities
      if: ${{ secrets.SNYK_TOKEN }}
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build --if-present

    - name: Build Docker image
      run: |
        if [ -f "Dockerfile" ]; then
          docker build -t mindbuddy:${{ github.sha }} .
        fi

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # 실제 배포 스크립트는 여기에 추가

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # 실제 배포 스크립트는 여기에 추가